4 methods of import/export

To Do
As shown in the previous slides the code, complete the exercise for the following
Method-1: Initializing values directly into DataFrame
Insert your know values, five rows of data with column headings as “USN, Name, Marks”
Method-2: Importing datasets from sklearn.datasets
Loading diabetes datasets sklearn.datasets.load_diabetes
Method-3: Importing datasets from a specific .csv file
sample_sales_data.csv
Method-4: Downloading datasets from existing dataset repositories like Kaggle,
UCI, Mendely, KEEL, etc.
https://data.mendeley.com/datasets/wj9rwkp9c2/1
Download diabetes datasets from Mendely using above link

CODE:
import pandas as pd
from sklearn.datasets import load_diabetes
from io import StringIO
import requests #For Method 4

# Method 1: Initializing values directly into DataFrame
data1 = {
    "USN": ["101", "102", "103", "104", "105"],
    "Name": ["Alice", "Bob", "Charlie", "David", "Eve"],
    "Marks": [85, 92, 78, 88, 95]
}
df1 = pd.DataFrame(data1)
print("Method 1: Directly Initialized DataFrame\n", df1)

# Method 2: Importing datasets from sklearn.datasets
diabetes_data = load_diabetes()
df2 = pd.DataFrame(diabetes_data.data, columns=diabetes_data.feature_names)
df2['target'] = diabetes_data.target
print("\nMethod 2: Diabetes Dataset from sklearn\n", df2.head())

# Method 3: Importing datasets from a specific .csv file
# Create a sample_sales_data.csv in memory for demonstration. In real use, this would be a file.

csv_data = """ProductID,Quantity,UnitPrice
1001,10,25.50
1002,5,50.00
1003,20,10.75
1004,15,30.25
1005,8,60.00
"""
df3 = pd.read_csv(StringIO(csv_data)) #In real use, pd.read_csv("sample_sales_data.csv")
print("\nMethod 3: Importing from CSV\n", df3)

# Method 4: Downloading datasets from existing dataset repositories like Kaggle, UCI, Mendely, KEEL, etc.
# Example: Downloading a CSV from a publicly available URL (simulated Kaggle/UCI download)
# For a real Kaggle download, you'd typically need authentication and the Kaggle API.

url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"  # Example URL. Replace with your actual dataset URL.
try:
    response = requests.get(url)
    response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
    csv_content = StringIO(response.text)
    df4 = pd.read_csv(csv_content)
    print("\nMethod 4: Downloaded Dataset\n", df4.head())
except requests.exceptions.RequestException as e:
    print(f"\nError downloading dataset: {e}")

  TO DO: To Do

Using the code given in the above slides, do the exercise of the “Stock
Market Data Analysis”, considering the follwoing

1. HDFC Bank Ltd. , ICICI Bank Ltd , Kotak Mahindra Bank Ltd.

tickers = ["HDFCBANK.NS", "ICICIBANK.NS", "KOTAKBANK.NS"]

2. Start date: 2024-01-01, End date: 2024-12-30

3. Plot the closing price and daily returns for all the three banks
mentioned.

CODE:
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

# 1. Define the ticker symbols for the banks
tickers = ["HDFCBANK.NS", "ICICIBANK.NS", "KOTAKBANK.NS"]

# 2. Fetch historical data
start_date = "2024-01-01"
end_date = "2024-12-30"  # Note: 2024 is a leap year.
data = yf.download(tickers, start=start_date, end=end_date, group_by='ticker')

# 3. Plot the closing price and daily returns for each bank
for ticker in tickers:
    bank_data = data[ticker]  # Select data for the current bank

    # Calculate daily returns
    daily_returns = bank_data['Close'].pct_change()

    # Create a copy and add the 'Daily Return' column
    bank_data_with_returns = bank_data.copy()
    bank_data_with_returns['Daily Return'] = daily_returns

    # Plotting
    plt.figure(figsize=(12, 6))

    plt.subplot(2, 1, 1)
    bank_data['Close'].plot(title=f"{ticker} - Closing Price")

    plt.subplot(2, 1, 2)
    bank_data_with_returns['Daily Return'].plot(title=f"{ticker} - Daily Returns", color='orange')

    plt.tight_layout()
    plt.show()
