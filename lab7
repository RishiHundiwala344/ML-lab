Build Support vector machine model for a given dataset


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# -----------------------------
# 1. Sample Dataset
# -----------------------------
data = {
    'Temperature': [30, 35, 40, 45, 50, 55, 60, 65, 70, 75],
    'Humidity':    [90, 85, 80, 78, 70, 65, 60, 55, 50, 45],
    'RainToday':   [1, 1, 1, 1, 0, 0, 0, 0, 0, 0]  # 1 = Yes, 0 = No
}

df = pd.DataFrame(data)

# Features and labels
X = df[['Temperature', 'Humidity']].values
y = df['RainToday'].values

# Convert labels to -1 and 1 for SVM
y = np.where(y == 1, 1, -1)

# -----------------------------
# 2. SVM Training Function
# -----------------------------
class SVM:
    def __init__(self, lr=0.001, lambda_param=0.01, n_iters=1000):
        self.lr = lr
        self.lambda_param = lambda_param
        self.n_iters = n_iters
        self.w = None
        self.b = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.w = np.zeros(n_features)
        self.b = 0

        for _ in range(self.n_iters):
            for idx, x_i in enumerate(X):
                condition = y[idx] * (np.dot(x_i, self.w) + self.b) >= 1
                if condition:
                    self.w -= self.lr * (2 * self.lambda_param * self.w)
                else:
                    self.w -= self.lr * (2 * self.lambda_param * self.w - np.dot(x_i, y[idx]))
                    self.b -= self.lr * y[idx]

    def predict(self, X):
        linear_output = np.dot(X, self.w) + self.b
        return np.where(linear_output >= 0, 1, 0)

# -----------------------------
# 3. Train the SVM Model
# -----------------------------
svm = SVM()
svm.fit(X, y)

# -----------------------------
# 4. Predict New Sample
# -----------------------------
new_sample = np.array([[48, 66]])  # Example: Temp=48Â°F, Humidity=66%
prediction = svm.predict(new_sample)[0]

# -----------------------------
# 5. Output
# -----------------------------
print("== SVM Classification ==")
print("New Sample:", new_sample[0])
print("Predicted Class (RainToday):", 'Yes' if prediction == 1 else 'No')

# -----------------------------
# 6. Visualization
# -----------------------------
def plot_svm(X, y, model):
    def get_line(w, b, x):
        return (-w[0]*x - b) / w[1]

    plt.figure(figsize=(8,6))
    for idx, label in enumerate(y):
        plt.scatter(X[idx][0], X[idx][1], color='blue' if label == 1 else 'red')

    ax = plt.gca()
    x_vals = np.linspace(np.min(X[:,0]), np.max(X[:,0]), 100)
    y_vals = get_line(model.w, model.b, x_vals)

    plt.plot(x_vals, y_vals, 'k--', label='Decision boundary')
    plt.xlabel('Temperature')
    plt.ylabel('Humidity')
    plt.title('SVM Decision Boundary')
    plt.grid(True)
    plt.legend()
    plt.show()

plot_svm(X, y, svm)




OUTPUT:

== SVM Classification ==
New Sample: [48 66]
Predicted Class (RainToday): No


