Implement Boosting ensemble (Adaboost) method on a given dataset


import numpy as np
import pandas as pd

# -----------------------------
# 1. Sample Dataset (Binary Classification)
# -----------------------------
data = {
    'Temperature': [30, 35, 40, 45, 50, 55, 60, 65],
    'Humidity':    [90, 85, 80, 78, 70, 65, 60, 55],
    'RainToday':   [1, 1, 1, 1, 0, 0, 0, 0]  # 1 = Yes, 0 = No
}

df = pd.DataFrame(data)
X = df[['Temperature', 'Humidity']].values
y = df['RainToday'].values
y = np.where(y == 1, 1, -1)  # Convert labels to -1 and 1

# -----------------------------
# 2. Decision Stump Weak Learner
# -----------------------------
class DecisionStump:
    def __init__(self):
        self.feature_index = None
        self.threshold = None
        self.polarity = 1

    def predict(self, X):
        n_samples = X.shape[0]
        X_column = X[:, self.feature_index]
        preds = np.ones(n_samples)
        if self.polarity == 1:
            preds[X_column < self.threshold] = -1
        else:
            preds[X_column > self.threshold] = -1
        return preds

# -----------------------------
# 3. AdaBoost Implementation
# -----------------------------
class AdaBoost:
    def __init__(self, n_clf=5):
        self.n_clf = n_clf

    def fit(self, X, y):
        n_samples, n_features = X.shape

        # Initialize weights to 1/N
        w = np.full(n_samples, (1 / n_samples))

        self.clfs = []
        self.alphas = []

        for _ in range(self.n_clf):
            clf = DecisionStump()
            min_error = float('inf')

            # Find best decision stump
            for feature_i in range(n_features):
                X_column = X[:, feature_i]
                thresholds = np.unique(X_column)
                for threshold in thresholds:
                    for polarity in [1, -1]:
                        preds = np.ones(n_samples)
                        if polarity == 1:
                            preds[X_column < threshold] = -1
                        else:
                            preds[X_column > threshold] = -1

                        # Calculate weighted error
                        misclassified = w[y != preds]
                        error = sum(misclassified)

                        if error < min_error:
                            min_error = error
                            clf.polarity = polarity
                            clf.threshold = threshold
                            clf.feature_index = feature_i

            # Compute alpha (model weight)
            EPS = 1e-10
            alpha = 0.5 * np.log((1.0 - min_error) / (min_error + EPS))

            # Update weights
            preds = clf.predict(X)
            w *= np.exp(-alpha * y * preds)
            w /= np.sum(w)  # Normalize

            # Save classifier and alpha
            self.clfs.append(clf)
            self.alphas.append(alpha)

    def predict(self, X):
        clf_preds = [alpha * clf.predict(X) for clf, alpha in zip(self.clfs, self.alphas)]
        y_pred = np.sum(clf_preds, axis=0)
        return np.where(y_pred >= 0, 1, 0)

# -----------------------------
# 4. Train and Predict
# -----------------------------
ada = AdaBoost(n_clf=5)
ada.fit(X, y)

new_samples = np.array([
    [48, 66],  # New sample to predict
    [60, 55],
])

predictions = ada.predict(new_samples)

# -----------------------------
# 5. Output
# -----------------------------
print("== AdaBoost Predictions ==")
for sample, pred in zip(new_samples, predictions):
    print(f"Input: {sample} => Predicted Class (RainToday): {'Yes' if pred == 1 else 'No'}")



OUTPUT:

== AdaBoost Predictions ==
Input: [48 66] => Predicted Class (RainToday): No
Input: [60 55] => Predicted Class (RainToday): No
