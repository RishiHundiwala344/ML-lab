Build k-Means algorithm to cluster a set of data stored in a .CSV file


import numpy as np
import pandas as pd

def euclidean_distance(a, b):
    return np.linalg.norm(a - b)

def kmeans(X, k, max_iters=100, tol=1e-4):
    # Randomly initialize centroids by selecting k random points from data
    np.random.seed(42)
    centroids = X[np.random.choice(len(X), k, replace=False)]

    for _ in range(max_iters):
        clusters = [[] for _ in range(k)]

        # Assign points to nearest centroid
        for x in X:
            distances = [euclidean_distance(x, centroid) for centroid in centroids]
            cluster_idx = np.argmin(distances)
            clusters[cluster_idx].append(x)

        new_centroids = np.array([np.mean(cluster, axis=0) if cluster else centroids[idx] 
                                  for idx, cluster in enumerate(clusters)])

        # Check convergence (if centroids do not change more than tol)
        if np.all(np.linalg.norm(new_centroids - centroids, axis=1) < tol):
            break

        centroids = new_centroids

    # Prepare cluster labels
    labels = np.zeros(len(X), dtype=int)
    for cluster_idx, cluster in enumerate(clusters):
        for point in cluster:
            point_idx = np.where((X == point).all(axis=1))[0][0]
            labels[point_idx] = cluster_idx

    return labels, centroids

# -----------------------------
# Load dataset from CSV
# Replace 'data.csv' with your CSV filename
# -----------------------------
df = pd.read_csv('data.csv')  # Make sure CSV has only numerical columns or select subset
X = df.values

# -----------------------------
# Run k-Means
# -----------------------------
k = 3  # number of clusters
labels, centroids = kmeans(X, k)

# -----------------------------
# Output results
# -----------------------------
print("Cluster assignments for each data point:")
print(labels)
print("\nCentroids:")
print(centroids)

